{"remainingRequest":"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/babel-loader/lib/index.js!/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/vue-json-excel/JsonExcel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/vue-json-excel/JsonExcel.vue","mtime":1544483898943},{"path":"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-clamped-array\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _typeof from \"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/aruzhan/WebstormProjects/vacAdmin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport download from \"downloadjs\";\nexport default {\n  props: {\n    // mime type [xls, csv]\n    type: {\n      type: String,\n      default: \"xls\"\n    },\n    // Json to download\n    data: {\n      type: Array,\n      required: false,\n      default: null\n    },\n    // fields inside the Json Object that you want to export\n    // if no given, all the properties in the Json are exported\n    fields: {\n      type: Object,\n      required: false\n    },\n    // this prop is used to fix the problem with other components that use the\n    // variable fields, like vee-validate. exportFields works exactly like fields\n    exportFields: {\n      type: Object,\n      required: false\n    },\n    // Use as fallback when the row has no field values\n    defaultValue: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\n    title: {\n      default: \"ZHABAYEV AKYLBEK\"\n    },\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n    footer: {\n      default: null\n    },\n    // filename to export\n    name: {\n      type: String,\n      default: \"data.xls\"\n    },\n    fetch: {\n      type: Function\n    },\n    meta: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  computed: {\n    // unique identifier\n    idName: function idName() {\n      var now = new Date().getTime();\n      return \"export_\" + now;\n    },\n    downloadFields: function downloadFields() {\n      if (this.fields !== undefined) return this.fields;\n      if (this.exportFields !== undefined) return this.exportFields;\n    }\n  },\n  methods: {\n    generate: function () {\n      var _generate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var data, json;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = this.data;\n\n                if (!(typeof this.fetch === 'function' || !data)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.fetch();\n\n              case 4:\n                data = _context.sent;\n\n              case 5:\n                if (!(!data || !data.length)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 7:\n                json = this.getProcessedJson(data, this.downloadFields);\n\n                if (!(this.type === \"html\")) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.export(this.jsonToXLS(json), this.name.replace(\".xls\", \".html\"), \"text/html\"));\n\n              case 12:\n                if (!(this.type === \"csv\")) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.export(this.jsonToCSV(json), this.name.replace(\".xls\", \".csv\"), \"application/csv\"));\n\n              case 14:\n                return _context.abrupt(\"return\", this.export(this.jsonToXLS(json), this.name, \"application/vnd.ms-excel\"));\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function generate() {\n        return _generate.apply(this, arguments);\n      };\n    }(),\n\n    /*\n    Use downloadjs to generate the download link\n    */\n    export: function _export(data, filename, mime) {\n      var blob = this.base64ToBlob(data, mime);\n      download(blob, filename, mime);\n    },\n\n    /*\n    jsonToXLS\n    ---------------\n    Transform json data into an xml document with MS Excel format, sadly\n    it shows a prompt when it opens, that is a default behavior for\n    Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\n    */\n    jsonToXLS: function jsonToXLS(data) {\n      var xlsTemp = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>${table}</table></body></html>';\n      var xlsData = \"<thead>\";\n      var colspan = Object.keys(data[0]).length; //Header\n\n      if (this.title != null) {\n        xlsData += this.parseExtraData(this.title, '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>');\n      } //Fields\n\n\n      xlsData += \"<tr>\";\n\n      for (var key in data[0]) {\n        xlsData += \"<th>\" + key + \"</th>\";\n      }\n\n      xlsData += \"</tr>\";\n      xlsData += \"</thead>\"; //Data\n\n      xlsData += \"<tbody>\";\n      data.map(function (item, index) {\n        xlsData += \"<tr>\";\n\n        for (var _key in item) {\n          xlsData += \"<td>\" + item[_key] + \"</td>\";\n        }\n\n        xlsData += \"</tr>\";\n      });\n      xlsData += \"</tbody>\"; //Footer\n\n      if (this.footer != null) {\n        xlsData += \"<tfoot>\";\n        xlsData += this.parseExtraData(this.footer, '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>');\n        xlsData += \"</tfoot>\";\n      }\n\n      return xlsTemp.replace(\"${table}\", xlsData);\n    },\n\n    /*\n    jsonToCSV\n    ---------------\n    Transform json data into an CSV file.\n    */\n    jsonToCSV: function jsonToCSV(data) {\n      var csvData = []; //Header\n\n      if (this.title != null) {\n        csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n      } //Fields\n\n\n      for (var key in data[0]) {\n        csvData.push(key);\n        csvData.push(\",\");\n      }\n\n      csvData.pop();\n      csvData.push(\"\\r\\n\"); //Data\n\n      data.map(function (item) {\n        for (var _key2 in item) {\n          var escapedCSV = item[_key2] + \"\"; // cast Numbers to string\n\n          if (escapedCSV.match(/[,\"\\n]/)) {\n            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n          }\n\n          csvData.push(escapedCSV);\n          csvData.push(\",\");\n        }\n\n        csvData.pop();\n        csvData.push(\"\\r\\n\");\n      }); //Footer\n\n      if (this.footer != null) {\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n      }\n\n      return csvData.join(\"\");\n    },\n\n    /*\n    getProcessedJson\n    ---------------\n    Get only the data to export, if no fields are set return all the data\n    */\n    getProcessedJson: function getProcessedJson(data, header) {\n      var keys = this.getKeys(data, header);\n      var newData = [];\n\n      var _self = this;\n\n      data.map(function (item, index) {\n        var newItem = {};\n\n        for (var label in keys) {\n          var property = keys[label];\n          newItem[label] = _self.getValue(property, item);\n        }\n\n        newData.push(newItem);\n      });\n      return newData;\n    },\n    getKeys: function getKeys(data, header) {\n      if (header) {\n        return header;\n      }\n\n      var keys = {};\n\n      for (var key in data[0]) {\n        keys[key] = key;\n      }\n\n      return keys;\n    },\n\n    /*\n    parseExtraData\n    ---------------\n    Parse title and footer attribute to the csv format\n    */\n    parseExtraData: function parseExtraData(extraData, format) {\n      var parseData = \"\";\n\n      if (Array.isArray(extraData)) {\n        for (var i = 0; i < extraData.length; i++) {\n          parseData += format.replace(\"${data}\", extraData[i]);\n        }\n      } else {\n        parseData += format.replace(\"${data}\", extraData);\n      }\n\n      return parseData;\n    },\n    getValue: function getValue(key, item) {\n      var field = _typeof(key) !== \"object\" ? key : key.field;\n      var indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n      var value = this.defaultValue;\n      if (!field) value = item;else if (indexes.length > 1) value = this.getValueFromNestedItem(item, indexes);else value = this.parseValue(item[field]);\n      if (key.hasOwnProperty('callback')) value = this.getValueFromCallback(value, key.callback);\n      return value;\n    },\n    getValueFromNestedItem: function getValueFromNestedItem(item, indexes) {\n      var nestedItem = item;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = indexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var index = _step.value;\n          if (nestedItem) nestedItem = nestedItem[index];\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return this.parseValue(nestedItem);\n    },\n    getValueFromCallback: function getValueFromCallback(item, callback) {\n      if (typeof callback !== \"function\") return this.defaultValue;\n      var value = callback(item);\n      return this.parseValue(value);\n    },\n    parseValue: function parseValue(value) {\n      return value || value === 0 ? value : this.defaultValue;\n    },\n    base64ToBlob: function base64ToBlob(data, mime) {\n      var base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n      var bstr = atob(base64);\n      var n = bstr.length;\n      var u8arr = new Uint8ClampedArray(n);\n\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n\n      return new Blob([u8arr], {\n        type: mime\n      });\n    }\n  } // end methods\n\n};",{"version":3,"sources":["JsonExcel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<div\n\t\t:id=\"idName\"\n\t\t@click=\"generate\">\n\t\t<slot>\n\t\t\tDownload {{name}}\n\t\t</slot>\n\t</div>\n</template>\n\n<script>\nimport download from \"downloadjs\";\n\nexport default {\n  props: {\n    // mime type [xls, csv]\n    type: {\n      type: String,\n      default: \"xls\"\n    },\n    // Json to download\n    data: {\n      type: Array,\n      required: false,\n      default: null\n    },\n    // fields inside the Json Object that you want to export\n    // if no given, all the properties in the Json are exported\n    fields: {\n      type: Object,\n      required: false\n    },\n    // this prop is used to fix the problem with other components that use the\n    // variable fields, like vee-validate. exportFields works exactly like fields\n    exportFields: {\n      type: Object,\n      required: false\n    },\n    // Use as fallback when the row has no field values\n    defaultValue: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\n    title: {\n      default: \"ZHABAYEV AKYLBEK\"\n    },\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n    footer: {\n      default: null\n    },\n    // filename to export\n    name: {\n      type: String,\n      default: \"data.xls\"\n    },\n    fetch: {\n      type: Function,\n    },\n    meta: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    // unique identifier\n    idName() {\n      var now = new Date().getTime();\n      return \"export_\" + now;\n    },\n\n    downloadFields() {\n      if (this.fields !== undefined) return this.fields;\n\n      if (this.exportFields !== undefined) return this.exportFields;\n    }\n  },\n  methods: {\n    async generate() {\n      let data = this.data;\n      if(typeof this.fetch === 'function' || !data)\n         data = await this.fetch();\n\n      if (!data || !data.length) {\n        return;\n      }\n\n      let json = this.getProcessedJson(data, this.downloadFields);\n      if (this.type === \"html\") {\n        // this is mainly for testing\n        return this.export(\n          this.jsonToXLS(json),\n          this.name.replace(\".xls\", \".html\"),\n          \"text/html\"\n        );\n      } else if (this.type === \"csv\") {\n        return this.export(\n          this.jsonToCSV(json),\n          this.name.replace(\".xls\", \".csv\"),\n          \"application/csv\"\n        );\n      }\n      return this.export(\n        this.jsonToXLS(json),\n        this.name,\n        \"application/vnd.ms-excel\"\n      );\n    },\n    /*\n\t\tUse downloadjs to generate the download link\n\t\t*/\n    export(data, filename, mime) {\n      let blob = this.base64ToBlob(data, mime);\n      download(blob, filename, mime);\n    },\n    /*\n\t\tjsonToXLS\n\t\t---------------\n\t\tTransform json data into an xml document with MS Excel format, sadly\n\t\tit shows a prompt when it opens, that is a default behavior for\n\t\tMicrosoft office and cannot be avoided. It's recommended to use CSV format instead.\n\t\t*/\n    jsonToXLS(data) {\n      let xlsTemp =\n        '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>${table}</table></body></html>';\n      let xlsData = \"<thead>\";\n      const colspan = Object.keys(data[0]).length;\n\n      //Header\n      if (this.title != null) {\n        xlsData += this.parseExtraData(\n          this.title,\n          '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\n        );\n      }\n\n      //Fields\n      xlsData += \"<tr>\";\n      for (let key in data[0]) {\n        xlsData += \"<th>\" + key + \"</th>\";\n      }\n      xlsData += \"</tr>\";\n      xlsData += \"</thead>\";\n\n      //Data\n      xlsData += \"<tbody>\";\n      data.map(function(item, index) {\n        xlsData += \"<tr>\";\n        for (let key in item) {\n          xlsData += \"<td>\" + item[key] + \"</td>\";\n        }\n        xlsData += \"</tr>\";\n      });\n      xlsData += \"</tbody>\";\n\n      //Footer\n      if (this.footer != null) {\n        xlsData += \"<tfoot>\";\n        xlsData += this.parseExtraData(\n          this.footer,\n          '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\n        );\n        xlsData += \"</tfoot>\";\n      }\n\n      return xlsTemp.replace(\"${table}\", xlsData);\n    },\n    /*\n\t\tjsonToCSV\n\t\t---------------\n\t\tTransform json data into an CSV file.\n\t\t*/\n    jsonToCSV(data) {\n      var csvData = [];\n      //Header\n      if (this.title != null) {\n        csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n      }\n      //Fields\n      for (let key in data[0]) {\n        csvData.push(key);\n        csvData.push(\",\");\n      }\n      csvData.pop();\n      csvData.push(\"\\r\\n\");\n      //Data\n      data.map(function(item) {\n        for (let key in item) {\n          let escapedCSV = item[key] + \"\"; // cast Numbers to string\n          if (escapedCSV.match(/[,\"\\n]/)) {\n            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n          }\n          csvData.push(escapedCSV);\n          csvData.push(\",\");\n        }\n        csvData.pop();\n        csvData.push(\"\\r\\n\");\n      });\n      //Footer\n      if (this.footer != null) {\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n      }\n      return csvData.join(\"\");\n    },\n    /*\n\t\tgetProcessedJson\n\t\t---------------\n\t\tGet only the data to export, if no fields are set return all the data\n\t\t*/\n    getProcessedJson(data, header) {\n      let keys = this.getKeys(data, header);\n      let newData = [];\n      let _self = this;\n      data.map(function(item, index) {\n        let newItem = {};\n        for (let label in keys) {\n          let property = keys[label];\n          newItem[label] = _self.getValue(property, item);\n        }\n        newData.push(newItem);\n      });\n\n      return newData;\n    },\n    getKeys(data, header) {\n      if (header) {\n        return header;\n      }\n\n      let keys = {};\n      for (let key in data[0]) {\n        keys[key] = key;\n      }\n      return keys;\n    },\n    /*\n\t\tparseExtraData\n\t\t---------------\n\t\tParse title and footer attribute to the csv format\n\t\t*/\n    parseExtraData(extraData, format) {\n      let parseData = \"\";\n      if (Array.isArray(extraData)) {\n        for (var i = 0; i < extraData.length; i++) {\n          parseData += format.replace(\"${data}\", extraData[i]);\n        }\n      } else {\n        parseData += format.replace(\"${data}\", extraData);\n      }\n      return parseData;\n    },\n\n    getValue(key, item) {\n      const field = typeof key   !== \"object\" ? key : key.field;\n      let indexes = typeof field !== \"string\" ? []  : field.split(\".\");\n      let value   = this.defaultValue;\n    \n      if (!field)\n\t      value = item;\n      else if( indexes.length > 1 )\n        value = this.getValueFromNestedItem(item, indexes);\n      else\n        value = this.parseValue(item[field]);\n      \n      if( key.hasOwnProperty('callback'))\n        value = this.getValueFromCallback(value, key.callback);\n      \n      return value;\n    },\n\n    getValueFromNestedItem(item, indexes){\n      let nestedItem = item;\n      for (let index of indexes) {\n        if(nestedItem)\n          nestedItem = nestedItem[index];\n      }\n      return this.parseValue(nestedItem);\n    },\n\n    getValueFromCallback(item, callback){\n      if(typeof callback !== \"function\")\n        return this.defaultValue\n      const value = callback(item);\n      return this.parseValue(value);\n    },\n    parseValue(value){\n      return value || value === 0 \n          ? value\n          : this.defaultValue;\n    },\n    base64ToBlob(data, mime) {\n      let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n      let bstr = atob(base64);\n      let n = bstr.length;\n      let u8arr = new Uint8ClampedArray(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      return new Blob([u8arr], { type: mime });\n    }\n  } // end methods\n};\n</script>\n"],"sourceRoot":"node_modules/vue-json-excel"}]}