{"remainingRequest":"/Users/aruzhan/WebstormProjects/vacwithbackend/node_modules/babel-loader/lib/index.js!/Users/aruzhan/WebstormProjects/vacwithbackend/src/store/store.js","dependencies":[{"path":"/Users/aruzhan/WebstormProjects/vacwithbackend/src/store/store.js","mtime":1544985172484},{"path":"/Users/aruzhan/WebstormProjects/vacwithbackend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aruzhan/WebstormProjects/vacwithbackend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    status: '',\n    token: sessionStorage.getItem('token') || '',\n    user: {}\n  },\n  mutations: {\n    auth_request: function auth_request(state) {\n      state.status = 'loading';\n    },\n    auth_success: function auth_success(state, token, user) {\n      state.status = 'success';\n      state.token = token;\n      state.user = user;\n    },\n    auth_error: function auth_error(state) {\n      state.status = 'error';\n    },\n    logout: function logout(state) {\n      state.status = '';\n      state.token = '';\n    }\n  },\n  actions: {\n    nur: function nur(_ref, data) {\n      var commit = _ref.commit;\n      return new Promise(function (resolve, reject) {\n        var token = sessionStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = \"Token \" + token;\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/livestock/LiveStock/',\n          data: data,\n          method: 'POST'\n        }).then(function (resp) {\n          console.log('NURZHIK', resp.data);\n          resolve(resp);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    login: function login(_ref2, user) {\n      var commit = _ref2.commit;\n      console.log(\"innnnn\", user);\n      return new Promise(function (resolve, reject) {\n        commit('auth_request');\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/login ',\n          data: user,\n          method: 'POST'\n        }).then(function (resp) {\n          var token = resp.data.token;\n          console.log(resp); // const user = resp.data.user\n\n          sessionStorage.setItem('token', token); // Add the following line:\n\n          axios.defaults.headers.common['Authorization'] = \"Token\" + token;\n          axios.defaults.headers.common['Accept'] = \"application/json\"; // Vue.prototype.$http.defaults.headers.common['Accept'] = \"application/json\"\n\n          commit('auth_success', token, user);\n          resolve(resp);\n        }).catch(function (err) {\n          commit('auth_error');\n          sessionStorage.removeItem('token');\n          reject(err);\n        });\n      });\n    },\n    createVillage: function createVillage(_ref3, village) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        var token = sessionStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = \"Token \" + token;\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/farmer/Village/',\n          data: village,\n          method: 'POST'\n        }).then(function (resp) {\n          console.log('IN MAIN', resp.data);\n          resolve(resp);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    createVLivestock: function createVLivestock(_ref4, live) {\n      var commit = _ref4.commit;\n      return new Promise(function (resolve, reject) {\n        var token = sessionStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = \"Token \" + token;\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/livestock/LiveStock/',\n          data: live,\n          method: 'POST'\n        }).then(function (resp) {\n          console.log('LIVESTOOOOOOCK', resp.data);\n          resolve(resp);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    createVaccination: function createVaccination(_ref5, vac) {\n      var commit = _ref5.commit;\n      return new Promise(function (resolve, reject) {\n        var token = sessionStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = \"Token \" + token;\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/vaccination/Medicine/',\n          data: vac,\n          method: 'POST'\n        }).then(function (resp) {\n          console.log('VACCINATION', resp.data);\n          resolve(resp);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    main: function main(_ref6) {\n      var commit = _ref6.commit;\n      return new Promise(function (resolve, reject) {\n        commit('auth_request');\n        console.log('promise zawel ');\n        var token = sessionStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = \"Token \" + token; // axios.defaults.headers.common['Content-Type'] = \"application/json\"\n        // axios.defaults.headers.common['Accept'] = \"application/json\"\n\n        console.log(axios.defaults.headers, 'headers in get');\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/employee/Department/',\n          method: 'GET'\n        }).then(function (resp) {\n          console.log('IN MAIN', resp.data);\n          resolve(resp);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    createWorker: function createWorker(_ref7, inf) {\n      var commit = _ref7.commit;\n      return new Promise(function (resolve, reject) {\n        commit('auth_request');\n        console.log('workers zawel ');\n        var token = sessionStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = \"Token \" + token; // axios.defaults.headers.common['Content-Type'] = \"application/json\"\n        // axios.defaults.headers.common['Accept'] = \"application/json\"\n\n        console.log(axios.defaults.headers, 'headers in get');\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/employee/Employee/',\n          data: inf,\n          method: 'POST'\n        }).then(function (resp) {\n          console.log('IN CREATE WORKER', resp);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    createFarmer: function createFarmer(_ref8, inf) {\n      var commit = _ref8.commit;\n      return new Promise(function (resolve, reject) {\n        commit('auth_request');\n        console.log('workers zawel ');\n        var token = sessionStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = \"Token \" + token;\n        console.log(axios.defaults.headers, 'headers in get');\n        axios({\n          url: 'https://vaccinsystem.herokuapp.com/farmer/Farmer/',\n          data: inf,\n          method: 'POST'\n        }).then(function (resp) {\n          console.log('IN CREATE FARMER', resp);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    register: function register(_ref9, user) {\n      var commit = _ref9.commit;\n      return new Promise(function (resolve, reject) {\n        commit('auth_request');\n        axios({\n          url: 'http://localhost:8080/register',\n          data: user,\n          method: 'POST'\n        }).then(function (resp) {\n          var token = resp.data.token;\n          var user = resp.data.user;\n          sessionStorage.setItem('token', token); // Add the following line:\n\n          axios.defaults.headers.common['Authorization'] = token;\n          commit('auth_success', token, user);\n          resolve(resp);\n        }).catch(function (err) {\n          commit('auth_error', err);\n          sessionStorage.removeItem('token');\n          reject(err);\n        });\n      });\n    },\n    logout: function logout(_ref10) {\n      var commit = _ref10.commit;\n      return new Promise(function (resolve, reject) {\n        commit('logout');\n        sessionStorage.removeItem('token');\n        delete axios.defaults.headers.common['Authorization'];\n        resolve();\n      });\n    }\n  },\n  getters: {\n    isLoggedIn: function isLoggedIn(state) {\n      return !!state.token;\n    },\n    authStatus: function authStatus(state) {\n      return state.status;\n    }\n  }\n}); // import Vue from 'vue'\n// import Vuex from 'vuex'\n// import axios from 'axios'\n//\n// Vue.use(Vuex)\n// // axios.defaults.baseURL = 'http://todo-laravel.test/api'\n//\n// export const store = new Vuex.Store({\n//     state: {\n//         token: localStorage.getItem('access_token') || null,\n//         filter: 'all',\n//         todos: [],\n//     },\n//     getters: {\n//         loggedIn(state) {\n//             return state.token !== null\n//         },\n//         remaining(state) {\n//             return state.todos.filter(todo => !todo.completed).length\n//         },\n//         anyRemaining(state, getters) {\n//             return getters.remaining != 0\n//         },\n//         todosFiltered(state) {\n//             if (state.filter == 'all') {\n//                 return state.todos\n//             } else if (state.filter == 'active') {\n//                 return state.todos.filter(todo => !todo.completed)\n//             } else if (state.filter == 'completed') {\n//                 return state.todos.filter(todo => todo.completed)\n//             }\n//             return state.todos\n//         },\n//         showClearCompletedButton(state) {\n//             return state.todos.filter(todo => todo.completed).length > 0\n//         }\n//     },\n//     mutations: {\n//         // addTodo(state, todo) {\n//         //     state.todos.push({\n//         //         id: todo.id,\n//         //         title: todo.title,\n//         //         completed: false,\n//         //         editing: false,\n//         //     })\n//         // },\n//         // updateTodo(state, todo) {\n//         //     const index = state.todos.findIndex(item => item.id == todo.id)\n//         //     state.todos.splice(index, 1, {\n//         //         'id': todo.id,\n//         //         'title': todo.title,\n//         //         'completed': todo.completed,\n//         //         'editing': todo.editing,\n//         //     })\n//         // },\n//         // deleteTodo(state, id) {\n//         //     const index = state.todos.findIndex(item => item.id == id)\n//         //     state.todos.splice(index, 1)\n//         // },\n//         // checkAll(state, checked) {\n//         //     state.todos.forEach(todo => (todo.completed = checked))\n//         // },\n//         // updateFilter(state, filter) {\n//         //     state.filter = filter\n//         // },\n//         // clearCompleted(state) {\n//         //     state.todos = state.todos.filter(todo => !todo.completed)\n//         // },\n//         // retrieveTodos(state, todos) {\n//         //     state.todos = todos\n//         // },\n//         retrieveToken(state, token) {\n//             state.token = token\n//         },\n//         destroyToken(state) {\n//             state.token = null\n//         },\n//         clearTodos(state) {\n//             state.todos = []\n//         },\n//     },\n//     actions: {\n//         // clearTodos(context) {\n//         //     context.commit('clearTodos')\n//         // },\n//         register(context, data) {\n//             return new Promise((resolve, reject) => {\n//                 axios.post('/register', {\n//                     name: data.name,\n//                     email: data.email,\n//                     password: data.password,\n//                 })\n//                     .then(response => {\n//                         resolve(response)\n//                     })\n//                     .catch(error => {\n//                         reject(error)\n//                     })\n//             })\n//         },\n//         destroyToken(context) {\n//             axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n//\n//             if (context.getters.loggedIn) {\n//                 return new Promise((resolve, reject) => {\n//                     axios.post('/logout')\n//                         .then(response => {\n//                             localStorage.removeItem('access_token')\n//                             context.commit('destroyToken')\n//                             resolve(response)\n//                             // console.log(response);\n//                             // context.commit('addTodo', response.data)\n//                         })\n//                         .catch(error => {\n//                             localStorage.removeItem('access_token')\n//                             context.commit('destroyToken')\n//                             reject(error)\n//                         })\n//                 })\n//             }\n//         },\n//         retrieveToken(context, credentials) {\n//\n//             return new Promise((resolve, reject) => {\n//                 axios.post('/login', {\n//                     username: credentials.username,\n//                     password: credentials.password,\n//                 })\n//                     .then(response => {\n//                         const token = response.data.access_token\n//\n//                         localStorage.setItem('access_token', token)\n//                         context.commit('retrieveToken', token)\n//                         resolve(response)\n//                         // console.log(response);\n//                         // context.commit('addTodo', response.data)\n//                     })\n//                     .catch(error => {\n//                         console.log(error)\n//                         reject(error)\n//                     })\n//             })\n//         },\n//         // retrieveTodos(context) {\n//         //     axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n//         //\n//         //     axios.get('/todos')\n//         //         .then(response => {\n//         //             context.commit('retrieveTodos', response.data)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // addTodo(context, todo) {\n//         //     axios.post('/todos', {\n//         //         title: todo.title,\n//         //         completed: false,\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('addTodo', response.data)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // updateTodo(context, todo) {\n//         //     axios.patch('/todos/' + todo.id, {\n//         //         title: todo.title,\n//         //         completed: todo.completed,\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('updateTodo', response.data)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // deleteTodo(context, id) {\n//         //     axios.delete('/todos/' + id)\n//         //         .then(response => {\n//         //             context.commit('deleteTodo', id)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // checkAll(context, checked) {\n//         //     axios.patch('/todosCheckAll', {\n//         //         completed: checked,\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('checkAll', checked)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // updateFilter(context, filter) {\n//         //\n//         //     context.commit('updateFilter', filter)\n//         //\n//         // },\n//         // clearCompleted(context) {\n//         //     const completed = context.state.todos\n//         //         .filter(todo => todo.completed)\n//         //         .map(todo => todo.id)\n//         //\n//         //     axios.delete('/todosDeleteCompleted', {\n//         //         data: {\n//         //             todos: completed\n//         //         }\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('clearCompleted')\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // }\n//     }\n// })",{"version":3,"sources":["/Users/aruzhan/WebstormProjects/vacwithbackend/src/store/store.js"],"names":["Vue","Vuex","axios","use","Store","state","status","token","sessionStorage","getItem","user","mutations","auth_request","auth_success","auth_error","logout","actions","nur","data","commit","Promise","resolve","reject","defaults","headers","common","url","method","then","resp","console","log","catch","err","login","setItem","removeItem","createVillage","village","createVLivestock","live","createVaccination","vac","main","createWorker","inf","createFarmer","register","getters","isLoggedIn","authStatus"],"mappings":"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":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n    state: {\n        status: '',\n        token: sessionStorage.getItem('token') || '',\n        user : {}\n    },\n    mutations: {\n        auth_request(state){\n            state.status = 'loading'\n        },\n        auth_success(state, token, user){\n            state.status = 'success'\n            state.token = token\n            state.user = user\n        },\n        auth_error(state){\n            state.status = 'error'\n        },\n        logout(state){\n            state.status = ''\n            state.token = ''\n        },\n    },\n    actions: {\n        nur({commit}, data){\n            return new Promise((resolve, reject) => {\n                const token = sessionStorage.getItem('token');\n                axios.defaults.headers.common['Authorization'] = \"Token \" + token\n\n                axios({url: 'https://vaccinsystem.herokuapp.com/livestock/LiveStock/', data: data, method: 'POST' })\n                    .then(resp => {\n                        console.log('NURZHIK',resp.data)\n                        resolve(resp)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n        },\n        login({commit}, user){\n            console.log(\"innnnn\",user)\n            return new Promise((resolve, reject) => {\n                commit('auth_request')\n                axios({url: 'https://vaccinsystem.herokuapp.com/login ', data: user, method: 'POST' })\n                    .then(resp => {\n                        const token = resp.data.token\n                        console.log(resp)\n                        // const user = resp.data.user\n                        sessionStorage.setItem('token', token);\n                        // Add the following line:\n                        axios.defaults.headers.common['Authorization'] = \"Token\" + token\n\n                            axios.defaults.headers.common['Accept'] = \"application/json\"\n                            // Vue.prototype.$http.defaults.headers.common['Accept'] = \"application/json\"\n                        commit('auth_success', token, user)\n                        resolve(resp)\n                    })\n                    .catch(err => {\n                        commit('auth_error')\n                        sessionStorage.removeItem('token')\n                        reject(err)\n                    })\n            })\n        },\n\n        createVillage({commit}, village){\n            return new Promise((resolve, reject) => {\n\n\n\n                const token = sessionStorage.getItem('token');\n                axios.defaults.headers.common['Authorization'] = \"Token \" + token\n\n                axios({url: 'https://vaccinsystem.herokuapp.com/farmer/Village/', data: village, method: 'POST' })\n                    .then(resp => {\n                        console.log('IN MAIN',resp.data)\n                        resolve(resp)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n        },\n        createVLivestock({commit}, live){\n            return new Promise((resolve, reject) => {\n\n\n\n                const token = sessionStorage.getItem('token');\n                axios.defaults.headers.common['Authorization'] = \"Token \" + token\n\n                axios({url: 'https://vaccinsystem.herokuapp.com/livestock/LiveStock/', data: live, method: 'POST' })\n                    .then(resp => {\n                        console.log('LIVESTOOOOOOCK',resp.data)\n                        resolve(resp)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n        },\n        createVaccination({commit}, vac){\n            return new Promise((resolve, reject) => {\n                const token = sessionStorage.getItem('token');\n                axios.defaults.headers.common['Authorization'] = \"Token \" + token\n\n                axios({url: 'https://vaccinsystem.herokuapp.com/vaccination/Medicine/', data: vac, method: 'POST' })\n                    .then(resp => {\n                        console.log('VACCINATION',resp.data)\n                        resolve(resp)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n        },\n\n        main({commit}){\n            return new Promise((resolve, reject) => {\n                commit('auth_request')\n                console.log('promise zawel ');\n                const token = sessionStorage.getItem('token');\n\n                axios.defaults.headers.common['Authorization'] = \"Token \" + token\n                // axios.defaults.headers.common['Content-Type'] = \"application/json\"\n                // axios.defaults.headers.common['Accept'] = \"application/json\"\n\n                console.log(axios.defaults.headers, 'headers in get');\n\n                axios({url: 'https://vaccinsystem.herokuapp.com/employee/Department/', method: 'GET' })\n\n                    .then(resp => {\n                        console.log('IN MAIN',resp.data)\n                        resolve(resp)\n\n\n                    })\n                    .catch(err => {console.log(err)\n                    })\n            })\n        },\n        createWorker({commit},inf){\n            return new Promise((resolve, reject) => {\n                commit('auth_request')\n                console.log('workers zawel ');\n                const token = sessionStorage.getItem('token');\n\n                axios.defaults.headers.common['Authorization'] = \"Token \" + token\n                // axios.defaults.headers.common['Content-Type'] = \"application/json\"\n                // axios.defaults.headers.common['Accept'] = \"application/json\"\n\n                console.log(axios.defaults.headers, 'headers in get');\n\n                axios({url: 'https://vaccinsystem.herokuapp.com/employee/Employee/', data: inf, method: 'POST' })\n\n                    .then(resp => {\n                        console.log('IN CREATE WORKER',resp)\n\n\n                    })\n                    .catch(err => {console.log(err)\n                    })\n            })\n        },\n        createFarmer({commit},inf){\n            return new Promise((resolve, reject) => {\n                commit('auth_request')\n                console.log('workers zawel ');\n                const token = sessionStorage.getItem('token');\n\n                axios.defaults.headers.common['Authorization'] = \"Token \" + token\n                console.log(axios.defaults.headers, 'headers in get');\n\n                axios({url: 'https://vaccinsystem.herokuapp.com/farmer/Farmer/', data: inf, method: 'POST' })\n\n                    .then(resp => {\n                        console.log('IN CREATE FARMER',resp)\n\n\n                    })\n                    .catch(err => {console.log(err)\n                    })\n            })\n        },\n        register({commit}, user){\n            return new Promise((resolve, reject) => {\n                commit('auth_request')\n                axios({url: 'http://localhost:8080/register', data: user, method: 'POST' })\n                    .then(resp => {\n                        const token = resp.data.token\n                        const user = resp.data.user\n                        sessionStorage.setItem('token', token)\n                        // Add the following line:\n                        axios.defaults.headers.common['Authorization'] = token\n                        commit('auth_success', token, user)\n                        resolve(resp)\n                    })\n                    .catch(err => {\n                        commit('auth_error', err)\n                        sessionStorage.removeItem('token')\n                        reject(err)\n                    })\n            })\n        },\n        logout({commit}){\n            return new Promise((resolve, reject) => {\n                commit('logout')\n                sessionStorage.removeItem('token')\n                delete axios.defaults.headers.common['Authorization']\n                resolve()\n            })\n        }\n    },\n    getters : {\n        isLoggedIn: state => !!state.token,\n        authStatus: state => state.status,\n    }\n})\n\n\n\n\n\n\n\n\n\n\n\n// import Vue from 'vue'\n// import Vuex from 'vuex'\n// import axios from 'axios'\n//\n// Vue.use(Vuex)\n// // axios.defaults.baseURL = 'http://todo-laravel.test/api'\n//\n// export const store = new Vuex.Store({\n//     state: {\n//         token: localStorage.getItem('access_token') || null,\n//         filter: 'all',\n//         todos: [],\n//     },\n//     getters: {\n//         loggedIn(state) {\n//             return state.token !== null\n//         },\n//         remaining(state) {\n//             return state.todos.filter(todo => !todo.completed).length\n//         },\n//         anyRemaining(state, getters) {\n//             return getters.remaining != 0\n//         },\n//         todosFiltered(state) {\n//             if (state.filter == 'all') {\n//                 return state.todos\n//             } else if (state.filter == 'active') {\n//                 return state.todos.filter(todo => !todo.completed)\n//             } else if (state.filter == 'completed') {\n//                 return state.todos.filter(todo => todo.completed)\n//             }\n//             return state.todos\n//         },\n//         showClearCompletedButton(state) {\n//             return state.todos.filter(todo => todo.completed).length > 0\n//         }\n//     },\n//     mutations: {\n//         // addTodo(state, todo) {\n//         //     state.todos.push({\n//         //         id: todo.id,\n//         //         title: todo.title,\n//         //         completed: false,\n//         //         editing: false,\n//         //     })\n//         // },\n//         // updateTodo(state, todo) {\n//         //     const index = state.todos.findIndex(item => item.id == todo.id)\n//         //     state.todos.splice(index, 1, {\n//         //         'id': todo.id,\n//         //         'title': todo.title,\n//         //         'completed': todo.completed,\n//         //         'editing': todo.editing,\n//         //     })\n//         // },\n//         // deleteTodo(state, id) {\n//         //     const index = state.todos.findIndex(item => item.id == id)\n//         //     state.todos.splice(index, 1)\n//         // },\n//         // checkAll(state, checked) {\n//         //     state.todos.forEach(todo => (todo.completed = checked))\n//         // },\n//         // updateFilter(state, filter) {\n//         //     state.filter = filter\n//         // },\n//         // clearCompleted(state) {\n//         //     state.todos = state.todos.filter(todo => !todo.completed)\n//         // },\n//         // retrieveTodos(state, todos) {\n//         //     state.todos = todos\n//         // },\n//         retrieveToken(state, token) {\n//             state.token = token\n//         },\n//         destroyToken(state) {\n//             state.token = null\n//         },\n//         clearTodos(state) {\n//             state.todos = []\n//         },\n//     },\n//     actions: {\n//         // clearTodos(context) {\n//         //     context.commit('clearTodos')\n//         // },\n//         register(context, data) {\n//             return new Promise((resolve, reject) => {\n//                 axios.post('/register', {\n//                     name: data.name,\n//                     email: data.email,\n//                     password: data.password,\n//                 })\n//                     .then(response => {\n//                         resolve(response)\n//                     })\n//                     .catch(error => {\n//                         reject(error)\n//                     })\n//             })\n//         },\n//         destroyToken(context) {\n//             axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n//\n//             if (context.getters.loggedIn) {\n//                 return new Promise((resolve, reject) => {\n//                     axios.post('/logout')\n//                         .then(response => {\n//                             localStorage.removeItem('access_token')\n//                             context.commit('destroyToken')\n//                             resolve(response)\n//                             // console.log(response);\n//                             // context.commit('addTodo', response.data)\n//                         })\n//                         .catch(error => {\n//                             localStorage.removeItem('access_token')\n//                             context.commit('destroyToken')\n//                             reject(error)\n//                         })\n//                 })\n//             }\n//         },\n//         retrieveToken(context, credentials) {\n//\n//             return new Promise((resolve, reject) => {\n//                 axios.post('/login', {\n//                     username: credentials.username,\n//                     password: credentials.password,\n//                 })\n//                     .then(response => {\n//                         const token = response.data.access_token\n//\n//                         localStorage.setItem('access_token', token)\n//                         context.commit('retrieveToken', token)\n//                         resolve(response)\n//                         // console.log(response);\n//                         // context.commit('addTodo', response.data)\n//                     })\n//                     .catch(error => {\n//                         console.log(error)\n//                         reject(error)\n//                     })\n//             })\n//         },\n//         // retrieveTodos(context) {\n//         //     axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n//         //\n//         //     axios.get('/todos')\n//         //         .then(response => {\n//         //             context.commit('retrieveTodos', response.data)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // addTodo(context, todo) {\n//         //     axios.post('/todos', {\n//         //         title: todo.title,\n//         //         completed: false,\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('addTodo', response.data)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // updateTodo(context, todo) {\n//         //     axios.patch('/todos/' + todo.id, {\n//         //         title: todo.title,\n//         //         completed: todo.completed,\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('updateTodo', response.data)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // deleteTodo(context, id) {\n//         //     axios.delete('/todos/' + id)\n//         //         .then(response => {\n//         //             context.commit('deleteTodo', id)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // checkAll(context, checked) {\n//         //     axios.patch('/todosCheckAll', {\n//         //         completed: checked,\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('checkAll', checked)\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // },\n//         // updateFilter(context, filter) {\n//         //\n//         //     context.commit('updateFilter', filter)\n//         //\n//         // },\n//         // clearCompleted(context) {\n//         //     const completed = context.state.todos\n//         //         .filter(todo => todo.completed)\n//         //         .map(todo => todo.id)\n//         //\n//         //     axios.delete('/todosDeleteCompleted', {\n//         //         data: {\n//         //             todos: completed\n//         //         }\n//         //     })\n//         //         .then(response => {\n//         //             context.commit('clearCompleted')\n//         //         })\n//         //         .catch(error => {\n//         //             console.log(error)\n//         //         })\n//         // }\n//     }\n// })"]}]}